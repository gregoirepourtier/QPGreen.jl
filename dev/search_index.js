var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"B. Zhang and R. Zhang. An FFT-based algorithm for efficient computation of Green’s functions for the Helmholtz and Maxwell’s equations in periodic domains. SIAM Journal on Scientific Computing 40, B915 – B941 (2018).\n\n\n\nC. Linton. The Green's function for the two-dimensional Helmholtz equation in periodic domains. Journal of Engineering Mathematics 33, 377–401 (1998).\n\n\n\n","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"We show here some examples on how to compute efficiently Quasi-periodic Green Functions and its first derivatives for the 2D Helmholtz equation. The main focus is on the FFT-based algorithm, but we also provide examples for the lattice sums and Ewald summation algorithms.","category":"page"},{"location":"examples/#Example-1:-FFT-based-algorithm","page":"Examples","title":"Example 1: FFT-based algorithm","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The first example is concerned with computing the quasi-periodic Green function for the 2D Helmholtz equation using the FFT-based algorithm (based on the article [1]).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, load the package, using the following command:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using QPGreen","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then initialize the different parameters, as a NamedTuple, that define your problems. We have","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Parameters\nparams = (alpha=0.3, k=1.0, c=0.6, c_tilde=1.0, epsilon=0.45, order=8)\nnothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The parameters are defined as follows:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"alpha is the quasiperiod, \nk is the wavenumber, \nc and c_tilde are the coefficients introduced in [1] that define the vertical bounds of the computational domains used in the FFT-based algorithm, determining the regions where interpolation and Fourier-based approximations are valid (consider x=(x_1 x_2) in mathbbR^2, then if x_2  c the we use the eigenfunction expansion, else the FFT-based algo),","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note on the choice of c and c_tilde\nThe following inequality must hold:    0  textc  textc_tilde","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"epsilon controls the support of smooth cutoff functions used to isolate and remove singularities,\norder denotes the regularity from the cut-off functions.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We set the grid size used to generate the 2D tensor product mesh (adjust for desired accuracy).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Size of the Grid\ngrid_size = 128\nnothing # hide","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"This method relies on two steps: a preparation step and an evaluation step. ","category":"page"},{"location":"examples/#Preparation-step","page":"Examples","title":"Preparation step","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The preparation step, independent of evaluating the function at specific points, computes the necessary Fourier coefficients and produces an interpolation object for function and gradient evaluation (if the flag is true), along with a cache of integral approximations. This step needs to be performed only once for a fixed set of parameters and grid resolution.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Preparation Step\nvalue_interpolator, grad_interpolator, cache = init_qp_green_fft(params, grid_size; grad=true)\nnothing # hide","category":"page"},{"location":"examples/#Evaluation-step","page":"Examples","title":"Evaluation step","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The evaluation step efficiently computes the Green’s function and its first derivative at any specified point within the periodic domain.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"# Evaluation Step for any points\nZ = (0.002π, 0.01)\neval_Green_function = eval_qp_green(Z, params, value_interpolator, cache; nb_terms=50)\ngrad_Green_function = grad_qp_green(Z, params, grad_interpolator, cache; nb_terms=50)\n@show \"The value of the Green function at the point $(Z) is: $(eval_Green_function)\"\n@show \"The value of the gradient of the Green function at the point $(Z) is: $(grad_Green_function)\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note here that the keyword argument nb_terms is used to control the number of terms in the eigenfunction expansion (in the case where the FFT-based algorithm is not used).","category":"page"},{"location":"examples/#Example-2:-Lattice-sums-algorithm","page":"Examples","title":"Example 2: Lattice sums algorithm","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"warning: Work in progress\nThis algorithm is still a work in progress.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The second algorithm implemented is the lattice sums algorithm (implementation was done based on the article [2]).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Once again, load the package, using the following command:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using QPGreen","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then initialize the different parameters, as a NamedTuple, that define your problems. We have","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"X, Y = (0.0, 0.01 * 2π)\n\nβ, k, d, M, L = (√2 / (2 * π), 1 / π, 2 * π, 80, 4)\ncsts = (β, k, d, M, L)\n\nSl = QPGreen.lattice_sums_preparation(csts);\neval_ls = QPGreen.lattice_sums_calculation((X, Y), csts, Sl; nb_terms=100)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nThe implementation for the derivatives is missing at the moment.","category":"page"},{"location":"examples/#Example-3:-Ewald's-method","page":"Examples","title":"Example 3: Ewald's method","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"warning: Work in progress\nThis algorithm is still a work in progress.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The last algorithm implemented is the Ewald summation algorithm (implementation was done based on the article [2]).","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Load the package, using the following command:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using QPGreen","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Then initialize the different parameters, as a NamedTuple, that define your problems. We have","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"(X, Y) = (0.0, 0.01 * 2π)\n\na, M₁, M₂, N, β, k, d = (2, 3, 2, 7, √2 / (2 * π), 1 / π, 2 * π)\ncsts = (a, M₁, M₂, N, β, k, d)\n\nres_ewald = QPGreen.ewald([X, Y], csts)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nThe implementation for the derivatives is missing at the moment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Markdown\nMarkdown.parse(\"\"\"\n$(read(\"../../README.md\",String))\n\"\"\")","category":"page"},{"location":"docstrings/#QPGreen","page":"Docstrings","title":"QPGreen","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Documentation for QPGreen.","category":"page"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"","category":"page"},{"location":"docstrings/#QPGreen.FFTCache-Union{Tuple{T}, Tuple{Integer, Integer, Any}, Tuple{Integer, Integer, Any, Type{T}}} where T<:Real","page":"Docstrings","title":"QPGreen.FFTCache","text":"FFTCache(N::Integers, grid_size::Integer, params::NamedTuple, T=Float64)\n\nConstruct a containers for FFT operations.\n\nArguments\n\nN: total number of grid points in one dimension.\ngrid_size: Number of half of the grid points in one dimension.\nparams: Physical and numerical constants\nT: Floating-point type for allocations. Defaults to Float64.\n\nReturns\n\nAn FFTCache object containing:\n\nj_idx: Vector of integers for the computations of Fourier coefficients [-grid_size, grid_size-1].\nt_j_fft: Spatial grid points in [-c̃, c̃].\nPreallocated complex vectors for FFT operations:\neval_int_fft_1D: 1D integration using FFT.\nshift_sample_eval_int: Shifted samples for FFT.\nfft_eval: FFT evaluation.\nshift_fft_1d: Shifted FFT result.\nfft_eval_flipped: Transposed result of FFT.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.IntegrationCache","page":"Docstrings","title":"QPGreen.IntegrationCache","text":"struct IntegrationCache{T1<:Real, T2<:Signed} <: QPGreen.AbstractIntegrationCache\n\nStructure storing the normalization factor and the parameters of integration for the cutoff functions.\n\nnormalization::Real: Normalization factor\n\nparams::QPGreen.IntegrationParameters: Parameters of integration\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#QPGreen.IntegrationParameters","page":"Docstrings","title":"QPGreen.IntegrationParameters","text":"struct IntegrationParameters{T1<:Real, T2<:Signed}\n\nStructure storing the parameters of integration for the cutoff functions.\n\na::Real: Lower bound\n\nb::Real: Upper bound\n\norder::Signed: Order of the cutoff function\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#QPGreen.S_even-NTuple{5, Any}","page":"Docstrings","title":"QPGreen.S_even","text":"S_even(l, β, k, d, M)\n\nCompute the lattice sum Sₗ for even values of l. Input arguments:\n\nl: integer value.\nβ: parameter β.\nk: parameter k.\nd: parameter d.\nM: number of terms in the sum.\n\nReturns the value of the lattice sum Sₗ for even values of l.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.S_odd-NTuple{5, Any}","page":"Docstrings","title":"QPGreen.S_odd","text":"S_odd(l, β, k, d, M)\n\nCompute the lattice sum Sₗ for odd values of l.\n\nInput arguments:\n\nl: integer value.\nβ: parameter β.\nk: parameter k.\nd: parameter d.\nM: number of terms in the sum.\n\nReturns the value of the lattice sum Sₗ for odd values of l.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.S₀-NTuple{4, Any}","page":"Docstrings","title":"QPGreen.S₀","text":"S₀(β, k, d, M)\n\nCompute the lattice sum S₀.\n\nInput arguments:\n\nβ: parameter β.\nk: parameter k.\nd: parameter d.\nM: number of terms in the sum.\n\nReturns the value of the lattice sum S₀.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.Yε-Union{Tuple{T}, Tuple{T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.Yε","text":"Yε(x, cache::IntegrationCache)\n\nEvaluate the cutoff function Yε at the point x (C^∞ function).\n\nInput arguments\n\nx: point at which the cutoff function is evaluated.\ncache: see IntegrationCache.\n\nReturns\n\nThe value of the cutoff function Yε at x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.Yε_1st_der-Union{Tuple{T}, Tuple{T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.Yε_1st_der","text":"Yε_1st_der(x, cache::IntegrationCache)\n\nEvaluate the derivative of the cutoff function Yε at the point x.\n\nInput arguments\n\nx: point at which the derivative of the cutoff function is evaluated.\ncache: see IntegrationCache.\n\nReturns\n\nThe value of the derivative of the cutoff function Yε at x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.Yε_2nd_der-Union{Tuple{T}, Tuple{T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.Yε_2nd_der","text":"Yε_2nd_der(x, cache::IntegrationCache)\n\nEvaluate the 2nd order derivative of the cutoff function Yε at the point x.\n\nInput arguments\n\nx: point at which the 2nd order derivative of the cutoff function is evaluated.\ncache: see IntegrationCache.\n\nReturns\n\nThe value of the 2nd order derivative of the cutoff function Yε at x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.asin_ls-Tuple{Any}","page":"Docstrings","title":"QPGreen.asin_ls","text":"asin_ls(x)\n\nCompute the inverse sine function (arcsine function) for values outside of the interval [-1,1]. Input arguments:\n\nx: real values outside the interval [-1,1].\n\nReturns the inverse sine function (arcsine function) evaluated at x. For values inside the interval [-1,1], use the standard asin function.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.bernoulli-Tuple{Integer, Any}","page":"Docstrings","title":"QPGreen.bernoulli","text":"bernoulli(n, x)\n\nCompute the Bernoulli polynomial of degree n evaluated at x. Input arguments:\n\nn: degree of the Bernoulli polynomial.\nx: value at which the polynomial is evaluated.\n\nReturns the nth Bernoulli polynomial evaluated at x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.check_compatibility-Tuple{Any, Any}","page":"Docstrings","title":"QPGreen.check_compatibility","text":"check_compatibility(alpha, k)\n\nCheck if the parameters alpha and k are compatible, i.e., if βₙ is different from zero. For βₙ equal to zero, the algorithm fails.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eigfunc_expansion-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.eigfunc_expansion","text":"eigfunc_expansion(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the α-quasi-periodic Green's function using the eigenfunction expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the α-quasi-periodic Green's function for 2D Helmholtz equation at the point z, computed by the basic eigenfunction expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eigfunc_expansion_grad-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.eigfunc_expansion_grad","text":"eigfunc_expansion_grad(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the gradient of the α-quasi-periodic Green's function using the eigenfunction expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the gradient of the α-quasi-periodic Green's function for 2D Helmholtz equation at the point z, computed via the basic eigenfunction expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eigfunc_expansion_hess-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.eigfunc_expansion_hess","text":"eigfunc_expansion_hess(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the Hessian of the α-quasi-periodic Green's function using the eigenfunction expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the hessian of the α-quasi-periodic Green's function for 2D Helmholtz equation at the point z, computed via the basic eigenfunction expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eval_qp_green-Union{Tuple{T}, Tuple{Any, NamedTuple, T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.eval_qp_green","text":"eval_qp_green(x, params::NamedTuple, interpolator, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the quasiperiodic Green's function G(x) using the FFT-based method [1] with series expansion fallback.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order.\nvalue_interpolator: Bicubic spline interpolator of Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\nG: The approximate value of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eval_qp_green_asymptotic-Union{Tuple{T}, Tuple{Any, NamedTuple, T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.eval_qp_green_asymptotic","text":"eval_qp_green_asymptotic(x, params::NamedTuple, interpolator, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the quasiperiodic Green's function G(x) using the FFT-based method [1] with series expansion fallback. Here to remove the singularity we use its asymptotic expansion.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order.\nvalue_interpolator: Bicubic spline interpolator of Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\nG: The approximate value of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eval_smooth_qp_green-Union{Tuple{T}, Tuple{Any, NamedTuple, T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.eval_smooth_qp_green","text":"eval_smooth_qp_green(x, params::NamedTuple, value_interpolator; nb_terms=50)\n\nCompute the smooth α-quasi-periodic Green's function G_0(x) (i.e. without the term H_0^(1)(kx) using the FFT-based method [1] with series expansion fallback.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\nvalue_interpolator: Bicubic spline interpolator for Ln.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\nG_0: The approximate value of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.eval_smooth_qp_green_asymptotic-Union{Tuple{T}, Tuple{Any, NamedTuple, T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.eval_smooth_qp_green_asymptotic","text":"eval_smooth_qp_green_asymptotic(x, params::NamedTuple, value_interpolator, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the smooth α-quasi-periodic Green's function G_0(x) (i.e. without the term H_0^(1)(kx) using the FFT-based method [1] with series expansion fallback. Here to remove the singularity we use its asymptotic expansion.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\nvalue_interpolator: Bicubic spline interpolator for Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\nG_0: The approximate value of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.ewald-Tuple{Any, Any}","page":"Docstrings","title":"QPGreen.ewald","text":"ewald(z, csts)\n\nEvaluation of the Green's function using Ewald's method. Input arguments:\n\nz: coordinates.\ncsts: tuple of constants (a, M₁, M₂, N, β, k, d).\n\nReturns the value of the Green's function at the point z.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.f_hankel-Tuple{Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.f_hankel","text":"f_hankel(x_norm, k, cache::IntegrationCache)\n\nCalculate the function f_hankel.\n\nInput arguments\n\n- `x_norm`: norm of the point at which the function is evaluated\n- `k`: wavenumber\n- `cache`: cache for the cut-off function `Yε`\n\nReturns\n\n- The value of the function `f_hankel` at the point `x`.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.f₁-Tuple{Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.f₁","text":"f₁(x, cache::IntegrationCache)\n\nCalculate the function f₁.\n\nInput arguments\n\nx: point at which the function is evaluated\ncache: cache for the cut-off functionYε`\n\nReturns\n\nThe value of the function f₁ at the point x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.f₂-Tuple{Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.f₂","text":"f₂(x, cache::IntegrationCache)\n\nCalculate the function f₂.\n\nInput arguments\n\nx: point at which the function is evaluated\ncache: cache for the cut-off function Yε\n\nReturns\n\nThe value of the function f₂.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.g_sing-Tuple{Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.g_sing","text":"g_sing(x_norm, k, cache::IntegrationCache)\n\nCalculate the function g_sing (removal of the singularity - gradient case - in the Fourier space in the case where you use the Hankel function directly and not its asymptotic form).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.get_F̂ⱼ-Union{Tuple{T}, Tuple{Any, Any, Any, Any, Any, Complex{T}, Type{T}}} where T","page":"Docstrings","title":"QPGreen.get_F̂ⱼ","text":"get_F̂ⱼ(j₁, j₂, c̃, Φ̂₁ⱼ, Φ̂₂ⱼ, F̂₁ⱼ₀::Complex{T}, ::Type{T}) where {T}\n\nCalculate the Fourier coefficients F̂ⱼ.\n\nInput arguments\n\nj₁: first index\nj₂: second index\nc̃: parameter of the periodicity\nΦ̂₁ⱼ: Fourier coefficients of the function Φ₁\nΦ̂₂ⱼ: Fourier coefficients of the function Φ₂\nF̂₁ⱼ₀: Fourier coefficient of the function F₁ at |j| = 0\nT: type of the parameter α\n\nReturns\n\nThe Fourier coefficients F̂ⱼ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.get_K̂ⱼ!-Union{Tuple{T}, Tuple{Any, NamedTuple, Any, Any, QPGreen.FFTCache{T}, QPGreen.IntegrationCache, Any}} where T","page":"Docstrings","title":"QPGreen.get_K̂ⱼ!","text":"get_K̂ⱼ!(K̂ⱼ, params::NamedTuple, N, i, fft_cache::FFTCache{T}, cache::IntegrationCache, p) where {T}\n\nMutating function that computes the Fourier coefficients K̂ⱼ.\n\nInput arguments\n\nK̂ⱼ: matrix to store the Fourier coefficients\nparams: Named tuple containing physical and numerical constants\nN: size of the grid\ni: index of the grid points\nfft_cache: cache for the FFT\ncache: cache for the cut-off function Yε\np: plan for the FFT\n\nReturns\n\nThe Fourier coefficients K̂ⱼ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.get_t-Tuple{Any}","page":"Docstrings","title":"QPGreen.get_t","text":"get_t(x)\n\nFind the value of t in the interval [-π, π[ such that x = 2nπ + t.\n\nInput arguments\n\nx: point at which the function is evaluated\n\nReturns\n\nThe value of t.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.get_Ĥⱼ-Union{Tuple{T}, Tuple{Any, Any, NamedTuple, Any, Any, Any, Any, Any, Any, Complex{T}, Type{T}}} where T","page":"Docstrings","title":"QPGreen.get_Ĥⱼ","text":"get_Ĥⱼ(j₁, j₂, params::NamedTuple, F̂₁ⱼ, F̂₂ⱼ, ρ̂ₓⱼ, Φ̂₃ⱼ, ĥ₁ⱼ, ĥ₂ⱼ, Ĥ₁ⱼ₀, T)\n\nCalculate the Fourier coefficients Ĥⱼ.\n\nInput arguments\n\n- `j₁`: first index\n- `j₂`: second index\n- `params`: named tuple containing physical and numerical constants\n- `F̂₁ⱼ`: Fourier coefficients of the function `F₁`\n- `F̂₂ⱼ`: Fourier coefficients of the function `F₂`\n- `ρ̂ₓⱼ`: Fourier coefficients of the function `ρₓ`\n- `Φ̂₃ⱼ`: Fourier coefficients of the function `Φ₃`\n- `ĥ₁ⱼ`: Fourier coefficients of the function `h₁_reduced`\n- `ĥ₂ⱼ`: Fourier coefficients of the function `h₂_reduced`\n- `Ĥ₁ⱼ₀`: Fourier coefficient of the function `H₁` at `|j| = 0`\n- `T`: type of the parameter `α`\n\nReturns\n\nThe Fourier coefficients Ĥⱼ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.grad_f_hankel-Tuple{Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.grad_f_hankel","text":"grad_f_hankel(x_norm, k, cache::IntegrationCache)\n\nCalculate the gradient of the function f_hankel.\n\nInput arguments\n\n- `x_norm`: norm of the point at which the function is evaluated\n- `k`: wavenumber\n- `cache`: cache for the cut-off function `Yε`\n\nReturns\n\n- The value of the gradient of `f_hankel` at the point `x`.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.grad_qp_green-Union{Tuple{T2}, Tuple{T1}, Tuple{Any, NamedTuple, NamedTuple{T1, T2}, QPGreen.IntegrationCache}} where {T1, T2}","page":"Docstrings","title":"QPGreen.grad_qp_green","text":"grad_qp_green(x, params::NamedTuple, grad::NamedTuple, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the gradient of the α-quasi-periodic Green's function G(x) using the FFT-based method [1] with series expansion fallback.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\ngrad: Bicubic spline interpolator for the gradient of Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\n∇G: The approximate value of the gradient of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.grad_qp_green_asymptotic-Union{Tuple{T2}, Tuple{T1}, Tuple{Any, NamedTuple, NamedTuple{T1, T2}, QPGreen.IntegrationCache}} where {T1, T2}","page":"Docstrings","title":"QPGreen.grad_qp_green_asymptotic","text":"grad_qp_green_asymptotic(x, params::NamedTuple, grad::NamedTuple, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the gradient of the α-quasi-periodic Green's function G(x) using the FFT-based method [1] with series expansion fallback. Here to remove the singularity we use its asymptotic expansion.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\ngrad: Bicubic spline interpolator for the gradient of Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\n∇G: The approximate value of the gradient of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.grad_smooth_qp_green-Union{Tuple{T2}, Tuple{T1}, Tuple{Any, NamedTuple, NamedTuple{T1, T2}, QPGreen.IntegrationCache}} where {T1, T2}","page":"Docstrings","title":"QPGreen.grad_smooth_qp_green","text":"grad_smooth_qp_green(x, params::NamedTuple, grad::NamedTuple; nb_terms=50)\n\nCompute the gradient of the smooth α-quasi-periodic Green's function using the FFT-based method [1] with series expansion fallback.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\ngrad: Bicubic spline interpolator for the gradient of Ln.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\n∇G_0: The approximate value of the gradient of the smooth quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.grad_smooth_qp_green_asymptotic-Union{Tuple{T2}, Tuple{T1}, Tuple{Any, NamedTuple, NamedTuple{T1, T2}, QPGreen.IntegrationCache}} where {T1, T2}","page":"Docstrings","title":"QPGreen.grad_smooth_qp_green_asymptotic","text":"grad_smooth_qp_green_asymptotic(x, params::NamedTuple, grad::NamedTuple, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the gradient of the smooth α-quasi-periodic Green's function using the FFT-based method [1] with series expansion fallback. Here to remove the singularity we use its asymptotic expansion.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\ngrad: Bicubic spline interpolator for the gradient of Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\n∇G_0: The approximate value of the gradient of the smooth quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.h_sing-Tuple{Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.h_sing","text":"h_sing(x_norm, k, cache::IntegrationCache)\n\nCalculate the function h_sing (removal of the singularity - hessian case - in the Fourier space in the case where you use the Hankel function directly and not its asymptotic form).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.hess_f_hankel-Tuple{Any, Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.hess_f_hankel","text":"hess_f_hankel(x, r, k, α, cache::IntegrationCache)\n\nCalculate the Hessian of the function f_hankel.\n\nInput arguments\n\n- `x`: point at which the function is evaluated\n- `r`: norm of the point at which the function is evaluated\n- `k`: wavenumber\n- `α`: quasi-periodicity parameter\n- `cache`: cache for the cut-off function `Yε`\n\nReturns\n\n- The value of the Hessian of `f_hankel` at the point `x`.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.hess_qp_green-Union{Tuple{T2}, Tuple{T1}, Tuple{Any, NamedTuple, NamedTuple{T1, T2}, QPGreen.IntegrationCache}} where {T1, T2}","page":"Docstrings","title":"QPGreen.hess_qp_green","text":"hess_qp_green(x, params::NamedTuple, hess::NamedTuple, Yε_cache::IntegrationCache; nb_terms=50)\n\nCompute the Hessian of the α-quasi-periodic Green's function G(x) using the FFT-based method [1] with series expansion fallback.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\nhess: Bicubic spline interpolator for the Hessian of Ln.\nYε_cache: Precomputed cache for cutoff function Yε evaluations.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\nHG: The approximate value of the Hessian of the quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.hess_smooth_qp_green-Union{Tuple{T2}, Tuple{T1}, Tuple{Any, NamedTuple, NamedTuple{T1, T2}, QPGreen.IntegrationCache}} where {T1, T2}","page":"Docstrings","title":"QPGreen.hess_smooth_qp_green","text":"hess_smooth_qp_green(x, params::NamedTuple, hess::NamedTuple; nb_terms=50)\n\nCompute the Hessian of the smooth α-quasi-periodic Green's function G(x) using the FFT-based method [1] with series expansion fallback.\n\nInput arguments\n\nx: 2D point at which to evaluate the Green's function.\nparams: Physical and numerical parameters containing:\nalpha: Quasiperiodicity coefficient\nk: Wavenumber\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order\nhess: Bicubic spline interpolator for the Hessian of Ln.\n\nKeyword Arguments\n\nnb_terms: Number of terms to use in the eigenfunction expansion fallback (when x₂ ∉ [-c, c])\n\nReturns\n\nHG: The approximate value of the Hessian of the smooth quasiperiodic Green's function at point x\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.h₁-Tuple{Any, NamedTuple, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.h₁","text":"h₁(x, params::NamedTuple, cache::IntegrationCache)\n\nCalculate the function h₁.\n\nInput arguments\n\nx: point at which the function is evaluated\nparams: Named tuple containing physical and numerical constants\n\nReturns\n\nThe value of the function h₁.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.h₁_reduced-Tuple{Any, Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.h₁_reduced","text":"h₁_reduced(x, x_norm, α, cache::IntegrationCache)\n\nCalculate the function h₁_reduced (removal of the singularity in the Fourier space for the 1st order derivative).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.h₂-Tuple{Any, NamedTuple, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.h₂","text":"h₂(x, params::NamedTuple, cache)\n\nCalculate the function h₂.\n\nInput arguments\n\nx: point at which the function is evaluated\nparams: Named tuple containing physical and numerical constants\n\nReturns\n\nThe value of the function h₂.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.h₂_reduced-Tuple{Any, Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.h₂_reduced","text":"h₂_reduced(x, x_norm, α, cache::IntegrationCache)\n\nCalculate the function h₂_reduced (removal of the singularity in the Fourier space for the 1st order derivative).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.image_expansion-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.image_expansion","text":"image_expansion(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the α-quasi-periodic Green's function using the image expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the α-quasi-periodic Green's function for the 2D Helmholtz equation at the point z, computed via the basic image expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.image_expansion_grad-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.image_expansion_grad","text":"image_expansion_grad(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the gradient of the α-quasi-periodic Green's function using the image expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the gradient of the α-quasi-periodic Green's function for the 2D Helmholtz equation at the point z, computed via the basic image expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.image_expansion_grad_smooth-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.image_expansion_grad_smooth","text":"image_expansion_grad_smooth(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the gradient of the smooth α-quasi-periodic Green's function using the image expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the gradient of the smooth α-quasi-periodic Green's function for 2D Helmholtz equation at the point z, computed via the basic image expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.image_expansion_hess-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.image_expansion_hess","text":"image_expansion_hess(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the Hessian of the α-quasi-periodic Green's function using the image expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the Hessian of the α-quasi-periodic Green's function for the 2D Helmholtz equation at the point z, computed via the basic image expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.image_expansion_hess_smooth-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.image_expansion_hess_smooth","text":"image_expansion_hess_smooth(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the Hessian of the smooth α-quasi-periodic Green's function using the image expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the Hessian of the smooth α-quasi-periodic Green's function for the 2D Helmholtz equation at the point z, computed via the basic image expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.image_expansion_smooth-Tuple{Any, NamedTuple}","page":"Docstrings","title":"QPGreen.image_expansion_smooth","text":"image_expansion_smooth(z, params::NamedTuple; period=2π, nb_terms=50)\n\nCompute the smooth α-quasi-periodic Green's function (i.e. without the term H_0^(1)(kx) using the image expansion.\n\nInput arguments\n\nz: coordinates of the difference between the target point and source point.\nparams: named tuple of the physical and numerical parameters for the problem definition.\n\nReturns\n\nThe value of the smooth α-quasi-periodic Green's function for the 2D Helmholtz equation at the point z, computed via the basic image expansion.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.init_qp_green_fft-Tuple{NamedTuple, Integer}","page":"Docstrings","title":"QPGreen.init_qp_green_fft","text":"init_qp_green_fft(params::NamedTuple, grid_size::Integer; grad=false, hess=false)\n\nPreparation step of the FFT-based algorithm.\n\nInput arguments\n\nparams: Physical and numerical parameters, containing:\nalpha: Quasiperiodicity coefficient.\nk: Wave number.\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order for integration.\ngrid_size: Number of grid points per dimension (grid is 2 * grid_size × 2 * grid_size).\n\nKeyword Arguments\n\ngrad: if true, computes additionally the gradient ∇G of the quasi periodic Green's function.\nhess: if true, computes additionally the Hessian HG of the quasi periodic Green's function.\n\nReturns\n\n- A NamedTuple with fields\n        + `value`: Spline interpolator for the function `Ln`.\n        + `grad`: Tuple of spline interpolators for the first derivatives of `Ln` (`∂/∂x₁`, `∂/∂x₂`), if `grad=true`.\n        + `hess`: Tuple of spline interpolators for the second derivatives of `Ln` (`∂²/∂x₁²`, `∂²/∂x₁∂x₂`, `∂²/∂x₂²`), if `hess=true`.\n        + `cache`: Precomputed integration cache for reuse in later computations.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.init_qp_green_fft_asymptotic-Tuple{NamedTuple, Integer}","page":"Docstrings","title":"QPGreen.init_qp_green_fft_asymptotic","text":"init_qp_green_fft_asymptotic(params::NamedTuple, grid_size::Integer; grad=false)\n\nPreparation step of the FFT-based algorithm where we remove the singularity by using its asymptotic expansion.\n\nInput arguments\n\nparams: Physical and numerical parameters, containing:\nalpha: Quasiperiodicity coefficient.\nk: Wave number.\nc: Lower cutoff parameter for function χ.\nc_tilde: Upper cutoff parameter for function χ.\nepsilon: cutoff parameter for function Yε (recommended: 0.4341).\norder: Quadrature order for integration.\ngrid_size: Number of grid points per dimension (grid is 2 * grid_size × 2 * grid_size).\n\nKeyword Arguments\n\ngrad: if true, computes additionally the gradient ∇G of the quasi periodic Green's function.\n\nReturns\n\n- If `grad=false`: a NamedTuple with fields\n        + `value`: Spline interpolator for the function `Ln`.\n        + `cache`: Precomputed integration cache for reuse in later computations.\n- If `grad=true`: a NamedTuple with fields\n        + `value`: Spline interpolator for the function `Ln`.\n        + `grad`: Tuple of spline interpolators for the first derivatives of `Ln` (`∂/∂x₁`, `∂/∂x₂`).\n        + `cache`: Precomputed integration cache for reuse in later computations.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.lattice_sums_calculation-Tuple{Any, Any, AbstractArray}","page":"Docstrings","title":"QPGreen.lattice_sums_calculation","text":"lattice_sums_calculation(x, csts, Sₗ; c=0.6, nb_terms=100)\n\nCompute the Green's function using lattice sums. Input arguments:\n\nx: evaluation point\ncsts: tuple of constants (β, k, d, M, L)\nSₗ: lattice sum coefficients\nc: cutoff value\nnb_terms: number of terms in the sum\n\nKeyword arguments:\n\nc: cutoff value\nnb_terms: number of terms in the sum\n\nReturns the value of the Green's function at the point x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.lattice_sums_preparation-Tuple{Any}","page":"Docstrings","title":"QPGreen.lattice_sums_preparation","text":"lattice_sums_preparation(csts)\n\nPerform the preparation step for the lattice sums algorithm. Input arguments:\n\ncsts: tuple of constants (β, k, d, M, L) representing quasi-periodicty parameter, wave number , period, number of terms, and number of terms in the sum respectively.\n\nReturns the lattice sum coefficients.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.process_frequency_component!-NTuple{7, Any}","page":"Docstrings","title":"QPGreen.process_frequency_component!","text":"process_frequency_component!(i, N, params, fft_cache, χ_cache, fft_plan, K̂ⱼ)\n\nInternal helper for processing a single frequency component during quasi-periodic Green's function computation. Handles coefficient calculations and frequency index mapping for position i in the FFT grid.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.rfftshift_normalization!-NTuple{4, Any}","page":"Docstrings","title":"QPGreen.rfftshift_normalization!","text":"rfftshift_normalization!(Φ̂₁ⱼ, fft_Φ₁_eval, N, c̃)\n\nShift the Fourier coefficients obtained by rfft and normalize them.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.singularity_hessian-Tuple{Any, Any, Any}","page":"Docstrings","title":"QPGreen.singularity_hessian","text":"singularity_hessian(Z, r, k)\n\nCalculate the Hessian of the singularity of the QP Green function.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.Φ-Tuple{Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.Φ","text":"Φ(x, k, cache::IntegrationCache)\n\nCalculate the function Φ (removal of the singularity in the Fourier space in the case where you use the Hankel function directly and not its asymptotic form).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.Φ₁-Tuple{Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.Φ₁","text":"Φ₁(x, cache::IntegrationCache)\n\nCalculate the function Φ₁ (removal of the singularity in the Fourier space).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.ρₓ-Tuple{Any, Any, QPGreen.IntegrationCache}","page":"Docstrings","title":"QPGreen.ρₓ","text":"ρₓ(x, x_norm, cache::IntegrationCache)\n\nCalculate the function ρₓ (removal of the singularity in the Fourier space for the 1st order derivative).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.χ-Union{Tuple{T}, Tuple{T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.χ","text":"χ(x, cache::IntegrationCache)\n\nEvaluate the cutoff function χ at the point x (C^∞ function).\n\nInput arguments\n\nx: point at which the cutoff function is evaluated.\ncache: see IntegrationCache.\n\nReturns\n\nThe value of the cutoff function χ at x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#QPGreen.χ_der-Union{Tuple{T}, Tuple{T, QPGreen.IntegrationCache}} where T","page":"Docstrings","title":"QPGreen.χ_der","text":"χ_der(x, cache::IntegrationCache)\n\nEvaluate the derivative of the cutoff function χ at the point x.\n\nInput arguments\n\nx: point at which the derivative of the cutoff function is evaluated.\ncache: see IntegrationCache.\n\nReturns\n\nThe value of the derivative of the cutoff function χ at x.\n\n\n\n\n\n","category":"method"}]
}
